name: CI/CD Pipeline

on:
  push:
    branches: [ developer ]
  pull_request:
    branches: [ developer ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      zookeeper:
        image: bitnami/zookeeper:3.8
        env:
          ALLOW_ANONYMOUS_LOGIN: yes
        ports:
          - 2181:2181
        options: >-
          --health-cmd "echo srvr | nc localhost 2181"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      kafka:
        image: bitnami/kafka:3.6
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          ALLOW_PLAINTEXT_LISTENER: yes
        ports:
          - 9092:9092
        depends_on:
          - zookeeper
        options: >-
          --health-cmd "kafka-topics.sh --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install pytest pytest-cov flake8 pytest-asyncio httpx confluent-kafka
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
        TESTING: "true"
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        TEST_REDIS_URL: redis://localhost:6379/0
        TEST_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
      run: |
        # Wait for Kafka to be ready
        sleep 10
        # Create Kafka topic
        kafka-topics.sh --create --bootstrap-server localhost:9092 --topic price-events --partitions 1 --replication-factor 1 || true
        # Run tests
        pytest --cov=app tests/ --cov-report=xml -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/developer'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/market-data-backend:latest 